// Code generated by MockGen. DO NOT EDIT.
// Source: s3.go
//
// Generated by this command:
//
//	mockgen -source=s3.go -destination=mock_repository/mock_s3_repository.go -package=mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	model "github.com/walnuts1018/s3-oauth2-proxy/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockS3Repository is a mock of S3Repository interface.
type MockS3Repository struct {
	ctrl     *gomock.Controller
	recorder *MockS3RepositoryMockRecorder
	isgomock struct{}
}

// MockS3RepositoryMockRecorder is the mock recorder for MockS3Repository.
type MockS3RepositoryMockRecorder struct {
	mock *MockS3Repository
}

// NewMockS3Repository creates a new mock instance.
func NewMockS3Repository(ctrl *gomock.Controller) *MockS3Repository {
	mock := &MockS3Repository{ctrl: ctrl}
	mock.recorder = &MockS3RepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3Repository) EXPECT() *MockS3RepositoryMockRecorder {
	return m.recorder
}

// GetObject mocks base method.
func (m *MockS3Repository) GetObject(ctx context.Context, key string) (*model.S3Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", ctx, key)
	ret0, _ := ret[0].(*model.S3Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockS3RepositoryMockRecorder) GetObject(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockS3Repository)(nil).GetObject), ctx, key)
}
